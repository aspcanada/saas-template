name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.5.2'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run type checking
      run: pnpm run typecheck
      
    - name: Run linting
      run: pnpm run lint
      
    - name: Run tests
      run: pnpm run test
      
    - name: Build all packages
      run: pnpm run build

  deploy-infrastructure:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
        
    - name: Install AWS CDK
      run: npm install -g aws-cdk
      
    - name: Build infrastructure
      run: pnpm -C infra build
      
    - name: Deploy CoreStack
      run: pnpm -C infra cdk:deploy SaasTemplateCore --require-approval never
      
    - name: Deploy ApiStack
      run: pnpm -C infra cdk:deploy SaasTemplateApi --require-approval never
      
    - name: Get API URL
      id: get-api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks --stack-name SaasTemplateApi --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' --output text)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"
        
    - name: Set API URL as output
      run: echo "API_URL=${{ steps.get-api-url.outputs.api_url }}" >> $GITHUB_ENV

  deploy-web:
    needs: [test, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build web application
      run: pnpm -C apps/web build
      env:
        NEXT_PUBLIC_API_BASE_URL: ${{ needs.deploy-infrastructure.outputs.api_url }}
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        NEXT_PUBLIC_STRIPE_PRICE_PRO: ${{ secrets.NEXT_PUBLIC_STRIPE_PRICE_PRO }}
        NEXT_PUBLIC_STRIPE_PRICE_BUSINESS: ${{ secrets.NEXT_PUBLIC_STRIPE_PRICE_BUSINESS }}
        
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./apps/web

  notify:
    needs: [deploy-infrastructure, deploy-web]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-infrastructure.result }}" == "success" ] && [ "${{ needs.deploy-web.result }}" == "success" ]; then
          echo "✅ Production deployment successful!"
        else
          echo "❌ Production deployment failed!"
          exit 1
        fi

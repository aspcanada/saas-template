name: Deploy to Development

on:
  push:
    branches: [ develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.5.2'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run type checking
      run: pnpm run typecheck
      
    - name: Run linting
      run: pnpm run lint
      
    - name: Run tests
      run: pnpm run test
      
    - name: Run tests with coverage
      run: pnpm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./apps/*/coverage/lcov.info
        fail_ci_if_error: false

  deploy-infrastructure:
    needs: test
    runs-on: ubuntu-latest
    environment: development
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ secrets.AWS_REGION_DEV || 'us-east-1' }}
        
    - name: Install AWS CDK
      run: npm install -g aws-cdk
      
    - name: Build infrastructure
      run: pnpm -C infra build
      
    - name: Deploy CoreStack (Development)
      run: pnpm -C infra cdk:deploy SaasTemplateCoreDev --require-approval never
      env:
        CDK_DEFAULT_REGION: ${{ secrets.AWS_REGION_DEV || 'us-east-1' }}
        CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID_DEV }}
        
    - name: Deploy ApiStack (Development)
      run: pnpm -C infra cdk:deploy SaasTemplateApiDev --require-approval never
      env:
        CDK_DEFAULT_REGION: ${{ secrets.AWS_REGION_DEV || 'us-east-1' }}
        CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID_DEV }}
        
    - name: Get API URL
      id: get-api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks --stack-name SaasTemplateApiDev --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' --output text)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"

  deploy-web:
    needs: [test, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: development
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build web application
      run: pnpm -C apps/web build
      env:
        NEXT_PUBLIC_API_BASE_URL: ${{ needs.deploy-infrastructure.outputs.api_url }}
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY_DEV }}
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY_DEV }}
        NEXT_PUBLIC_STRIPE_PRICE_PRO: ${{ secrets.NEXT_PUBLIC_STRIPE_PRICE_PRO_DEV }}
        NEXT_PUBLIC_STRIPE_PRICE_BUSINESS: ${{ secrets.NEXT_PUBLIC_STRIPE_PRICE_BUSINESS_DEV }}
        
    - name: Deploy to Vercel (Preview)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--target preview'
        working-directory: ./apps/web

  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ secrets.AWS_REGION_DEV || 'us-east-1' }}
        
    - name: Cleanup PR resources
      run: |
        echo "Cleaning up resources for PR #${{ github.event.number }}"
        # Add cleanup logic here if needed
